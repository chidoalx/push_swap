// void	sort_stack(t_data *arg)
// {
// 	int smallest;
// 	int index;
// 	int i;

// 	if (!is_sorted(arg->stack_a, arg->a_len))
// 	{
// 		while (arg->a_len > 3)
// 		{
// 			smallest = find_smallest(arg, arg->stack_a);
// 			index = get_index(arg, smallest);
// 			i = arg->a_len / 2;
// 			if (arg->stack_a[0] == smallest)
// 				pb(arg);
// 			if (arg->stack_a[1] == smallest)
// 				(sa(arg), pb(arg));
// 			else if (index <= i)
// 				ra(arg);
// 			else
// 				rra(arg);
// 		}
// 		sort_three(arg, arg->stack_a);
// 		while (arg->b_len != 0)
// 			pa(arg);
// 	}
// }
***************************************************************************

// void    sort_five(t_data *arg, int *stack, int i)
// {
// 	if (!is_sorted(stack, i))
// 	{
// 		while (stack[0] != find_smallest(arg, stack))
// 			ra(arg);
// 		pb(arg);
// 		while (stack[0] != find_smallest(arg, stack))
// 			ra(arg);
// 		pb(arg);
// 		sort_three(arg, stack);
// 		pa(arg);
// 		pa(arg);
// 		if (stack[0] > stack[1])
// 			sa(arg);
// 	}
// }